<?php

/**
 * @file
 * Support for videos as media entities in GovCore.
 */

use Drupal\govcore_core\OverrideHelper as Override;
use Drupal\govcore_media\Form\AddByUrlForm;
use Drupal\govcore_media_video\Plugin\media\Source\VideoFile;
use Drupal\media\MediaInterface;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\govcore_media_video\Plugin\media\Source\Video;
use Drupal\govcore_media_image\Plugin\media\Source\Image;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\govcore_core\ConfigHelper;
use Drupal\govcore_media_image\Plugin\Field\FieldWidget\ImageCropWidget;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Implements hook_modules_installed().
 */
function govcore_media_audio_modules_installed(array $modules) {
  // Don't do anything during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  if (in_array('image_widget_crop', $modules)) {
    ConfigHelper::forModule('govcore_media_audio')
      ->optional()
      ->getEntity('crop_type', 'one_one')
      ->save();
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function govcore_media_video_field_widget_info_alter(array &$info) {
  if (isset($info['image_widget_crop'])) {
    // We cannot import the class with a use statement, because it will blow up
    // if Image Widget Crop is not installed.
    Override::pluginClass($info['image_widget_crop'], ImageCropWidget::class);
  }
}

/**
 * Implements hook_media_source_info_alter().
 */
function govcore_media_video_media_source_info_alter(array &$sources)
{
  if (isset($sources['video_embed_field'])) {
    $sources['video_embed_field']['input_match'] = [
      'field_types' => [
        'string',
        'string_long',
        'video_embed_field',
      ],
    ];
    $sources['video_embed_field']['preview'] = TRUE;
    $sources['video_embed_field']['forms']['media_library_add'] = AddByUrlForm::class;

    // Since the base class will not exist if video_embed_field is not enabled,
    // we cannot import this class at the top of the file, or things blow up.
    Override::pluginClass($sources['video_embed_field'], '\Drupal\govcore_media_video\Plugin\media\Source\Video');
  }
  Override::pluginClass($sources['video_file'], VideoFile::class);

}

  $module_exists = [\Drupal::moduleHandler(), 'moduleExists'];

  if ($module_exists('image_widget_crop')) {
    // Use the cropping widgets for every form display of the Image media type.
    $form_displays = \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->loadByProperties([
        'targetEntityType' => 'media',
        'bundle' => 'video',
      ]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function govcore_media_video_form_entity_browser_video_browser_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'govcore_media/browser.styling';
  $form['#attached']['library'][] = 'media_library/view';
  $form['#attached']['library'][] = 'media_entity_browser_media_library/view';
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function govcore_media_video_media_view_alter(array &$build, MediaInterface $media) {
  // If we are rendering an embedded video, give it a minimum width so that the
  // responsive styles provided by Video Embed Field don't accidentally cause
  // the video to be "invisible".
  if (isset($build['#embed']) && $media->getSource()->getPluginId() === 'video_embed_field') {
    $build['#attributes']['style'][] = 'min-width: 50%;';
  }
}
